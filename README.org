#+TITLE: Emacs Configuration
#+AUTHOR: Yauhen Artsiukhou
#+TOC: true
#+PROPERTY: header-args :tangle no

This is my emacs configuration: https://github.com/jsirex/emacs.d

* System Requirements

  I like to getting new things as soon as possible, so don't hesitate to use latest versions:

  - ~Debian GNU/Linux Testing~
  - ~emacs from source~ (/currently >= 29.0/)

  There are lots of stuff required to emacs function properly: compilers, tools, cli, fonts, etc...

  For that purpose I added ~install.sh~ which is safe to run multiple times.

  #+BEGIN_QUOTE
  Script must be run as regular user, but it *requires sudo*!
  #+END_QUOTE

  Here is example of installation procedure:

  #+BEGIN_SRC shell-script
    cd ~

    git clone github.com:<your-user>/emacs.d ~/.emacs.d
    cd ~/.emacs.d

    git remote add upstream https://github.com/jsirex/emacs.d.git

    # initial installation of emacs binaries
    # if required, you can override sudo command by:
    # SUDO="sudo -i -A"
    ./install.sh

    # Byte compile files
    make

    # run
    emacs
  #+END_SRC

  That's it!

* Configuration principles

  I think that maintain an universal emacs configuration which works brilliant both on Linux, Mac and Windows is too hard.
  That's why this particular configuration has strong focus on ~Debian GNU/Linux~ in GUI mode.
  There is good chance that it will work under any ~Linux~.

  I *didn't* test it in a console *terminal* mode as it is rare case for me.

  1. Keep 3rd party packages as minimum as possible. Prefer stock functions.
  2. Try to ~defer~ loading every package until it actually requied.
  3. Use ~package-user-dir~ based on your emacs version. This prevents bytecode incompatibility.

* Compilation

  There is two possible ways to start emacs: from compiled files and not.
  Compiled version loads faster and prefered in day to day work.
  But if you want modify emacs itself (this file) new changes will take effect after compilation.
  So it is better idea to clean compiled files with ~make clean~, work under emacs configuration.
  When ready - do a final compile: ~make~.


* TODO

1. DBUS
2. URL
3. TREE Sitter
4. Native Compilation

* Forking | Using | Contributing

  I didn't think too much about customization for now, not sure it is necessary.
  I hope ~git~ is enough for straight fork:

  1. Fork this repo on github
  2. Clone it to your home
  3. Customize configuration - it is strongly recommended to use one commit per logical change
  4. Add this repo as ~upstream~ repository
  5. Pull changes periodically
  6. If you want to share your fix or improvement
     1. Start new branch at ~upstream/master~
     2. Make changes or cherry-pick commits
     3. Create pull request

